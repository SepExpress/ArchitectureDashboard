name: Deployment

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '20.x'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      build-date: ${{ steps.version.outputs.build-date }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Use Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests
      run: npm test
    
    - name: Run security checks
      run: npm audit --audit-level moderate
    
    - name: Build application
      run: npm run build
    
    - name: Generate version info
      id: version
      run: |
        echo "version=${GITHUB_SHA::8}" >> $GITHUB_OUTPUT
        echo "build-date=$(date -Iseconds)" >> $GITHUB_OUTPUT
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts
        path: |
          dist/
          package.json
          package-lock.json

  docker-build:
    runs-on: ubuntu-latest
    needs: build-and-test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix=sha-
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
    
    - name: Create Dockerfile
      run: |
        cat > Dockerfile << 'EOF'
        FROM node:20-alpine
        
        # Install security updates
        RUN apk update && apk upgrade
        
        # Create app directory
        WORKDIR /app
        
        # Copy package files
        COPY package*.json ./
        
        # Install dependencies
        RUN npm ci --only=production && npm cache clean --force
        
        # Copy application files
        COPY dist/ ./dist/
        
        # Create non-root user
        RUN addgroup -g 1001 -S nodejs
        RUN adduser -S afripay -u 1001
        
        # Change ownership
        RUN chown -R afripay:nodejs /app
        USER afripay
        
        # Expose port
        EXPOSE 5000
        
        # Health check
        HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
          CMD node healthcheck.js
        
        # Start application
        CMD ["node", "dist/index.js"]
        EOF
    
    - name: Create healthcheck
      run: |
        cat > healthcheck.js << 'EOF'
        const http = require('http');
        const options = {
          host: 'localhost',
          port: 5000,
          path: '/health',
          timeout: 2000
        };
        
        const request = http.request(options, (res) => {
          if (res.statusCode === 200) {
            process.exit(0);
          } else {
            process.exit(1);
          }
        });
        
        request.on('error', () => {
          process.exit(1);
        });
        
        request.end();
        EOF
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    
    environment:
      name: staging
      url: https://staging.afripay.app
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying AfriPay to staging environment"
        echo "Version: ${{ needs.build-and-test.outputs.version }}"
        echo "Build Date: ${{ needs.build-and-test.outputs.build-date }}"
        
        # Add staging deployment commands here
        # Example: kubectl apply -f k8s/staging/
        # Example: docker-compose -f docker-compose.staging.yml up -d
    
    - name: Run smoke tests
      run: |
        sleep 30
        curl -f https://staging.afripay.app/health || exit 1
        npm run test:smoke:staging
    
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: 'AfriPay successfully deployed to staging! üöÄ'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-production:
    runs-on: ubuntu-latest
    needs: [build-and-test, docker-build, deploy-staging]
    if: github.ref == 'refs/heads/main' && startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    
    environment:
      name: production
      url: https://afripay.app
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts
    
    - name: Deploy to production
      run: |
        echo "Deploying AfriPay to production environment"
        echo "Version: ${{ needs.build-and-test.outputs.version }}"
        echo "Build Date: ${{ needs.build-and-test.outputs.build-date }}"
        
        # Add production deployment commands here
        # Example: kubectl apply -f k8s/production/
        # Example: docker-compose -f docker-compose.prod.yml up -d
    
    - name: Run production health checks
      run: |
        sleep 60
        curl -f https://afripay.app/health || exit 1
        npm run test:health:production
    
    - name: Run post-deployment tests
      run: |
        npm run test:smoke:production
        npm run test:critical-path:production
    
    - name: Update deployment tracking
      run: |
        curl -X POST "${{ secrets.DEPLOYMENT_WEBHOOK_URL }}" \
          -H "Content-Type: application/json" \
          -d '{
            "service": "afripay",
            "version": "${{ needs.build-and-test.outputs.version }}",
            "environment": "production",
            "status": "deployed",
            "timestamp": "${{ needs.build-and-test.outputs.build-date }}"
          }'
    
    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: 'AfriPay successfully deployed to production! üéâ'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  rollback:
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'rollback'
    
    environment:
      name: production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Rollback production deployment
      run: |
        echo "Rolling back AfriPay production deployment"
        # Add rollback commands here
        # Example: kubectl rollout undo deployment/afripay
        # Example: docker-compose -f docker-compose.prod.yml down && docker-compose -f docker-compose.prod.backup.yml up -d
    
    - name: Verify rollback
      run: |
        sleep 30
        curl -f https://afripay.app/health || exit 1
        npm run test:smoke:production
    
    - name: Notify rollback
      uses: 8398a7/action-slack@v3
      with:
        status: warning
        text: 'AfriPay production has been rolled back! ‚ö†Ô∏è'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  cleanup:
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: Clean up old Docker images
      run: |
        echo "Cleaning up old Docker images"
        # Add cleanup commands here
        # Example: docker image prune -f
    
    - name: Clean up old artifacts
      uses: geekyeggo/delete-artifact@v5
      with:
        name: build-artifacts
        failOnError: false