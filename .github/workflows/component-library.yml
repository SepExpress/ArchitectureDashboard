name: Component Library Pipeline

on:
  push:
    branches: [ main, develop, 'feature/component-*' ]
    paths:
      - 'client/src/components/**'
      - 'client/src/stories/**'
      - '.storybook/**'
      - 'codex.component.mts'
      - 'components.json'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'client/src/components/**'
      - 'client/src/stories/**'
      - '.storybook/**'
  workflow_dispatch:
    inputs:
      component_action:
        description: 'Component management action'
        required: true
        default: 'validate'
        type: choice
        options:
          - validate
          - build-storybook
          - publish-library
          - generate-docs
          - run-visual-tests
      component_name:
        description: 'Specific component to target (optional)'
        required: false
        type: string
      version_bump:
        description: 'Version bump type for publishing'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

env:
  NODE_VERSION: '20.x'
  STORYBOOK_PORT: 6006
  COMPONENT_LIBRARY_VERSION: '1.0.0'

jobs:
  # Component validation and linting
  validate-components:
    runs-on: ubuntu-latest
    if: github.event_name != 'workflow_dispatch' || github.event.inputs.component_action == 'validate'
    
    outputs:
      components-changed: ${{ steps.changes.outputs.components }}
      stories-changed: ${{ steps.changes.outputs.stories }}
      validation-status: ${{ steps.validate.outputs.status }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Detect component changes
      id: changes
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          CHANGED_COMPONENTS=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep '^client/src/components/' | cut -d'/' -f4 | sort -u | tr '\n' ',' | sed 's/,$//')
          CHANGED_STORIES=$(git diff --name-only ${{ github.event.pull_request.base.sha }} ${{ github.sha }} | grep '^client/src/stories/' | wc -l)
        else
          CHANGED_COMPONENTS=$(git diff --name-only HEAD~1 HEAD | grep '^client/src/components/' | cut -d'/' -f4 | sort -u | tr '\n' ',' | sed 's/,$//')
          CHANGED_STORIES=$(git diff --name-only HEAD~1 HEAD | grep '^client/src/stories/' | wc -l)
        fi
        echo "components=$CHANGED_COMPONENTS" >> $GITHUB_OUTPUT
        echo "stories=$CHANGED_STORIES" >> $GITHUB_OUTPUT
        echo "Changed components: $CHANGED_COMPONENTS"
        echo "Changed stories: $CHANGED_STORIES"
    
    - name: Validate component structure
      id: validate
      run: |
        echo "Validating component library structure..."
        
        # Check if codex.component.mts exists
        if [ ! -f "codex.component.mts" ]; then
          echo "❌ Component management CLI not found"
          exit 1
        fi
        
        # Check if components.json exists
        if [ ! -f "components.json" ]; then
          echo "❌ Components configuration not found"
          exit 1
        fi
        
        # Validate component directory structure
        if [ ! -d "client/src/components" ]; then
          echo "❌ Components directory not found"
          exit 1
        fi
        
        # Check for required component files
        VALIDATION_ERRORS=0
        
        for component_dir in client/src/components/*/; do
          if [ -d "$component_dir" ]; then
            component_name=$(basename "$component_dir")
            
            # Skip utility directories
            if [[ "$component_name" =~ ^(ui|layout|shared)$ ]]; then
              continue
            fi
            
            # Check for main component file
            if [ ! -f "${component_dir}${component_name}.tsx" ] && [ ! -f "${component_dir}index.tsx" ]; then
              echo "⚠️ Missing main component file in $component_name"
              VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
            fi
            
            # Check for story file
            if [ ! -f "${component_dir}${component_name}.stories.tsx" ]; then
              echo "⚠️ Missing story file for $component_name"
              VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
            fi
            
            # Check for test file
            if [ ! -f "${component_dir}${component_name}.test.tsx" ]; then
              echo "⚠️ Missing test file for $component_name"
              VALIDATION_ERRORS=$((VALIDATION_ERRORS + 1))
            fi
          fi
        done
        
        if [ $VALIDATION_ERRORS -eq 0 ]; then
          echo "✅ All component validations passed"
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "⚠️ Found $VALIDATION_ERRORS validation warnings"
          echo "status=warning" >> $GITHUB_OUTPUT
        fi
    
    - name: Run TypeScript validation
      run: |
        echo "Running TypeScript validation for components..."
        npx tsc --noEmit --project tsconfig.json
    
    - name: Run component linting
      run: |
        echo "Linting component files..."
        npx eslint client/src/components/**/*.{ts,tsx} --max-warnings 0 || true
    
    - name: Run component tests
      run: |
        echo "Running component unit tests..."
        npm run test -- --passWithNoTests --coverage --testPathPattern=components
    
    - name: Upload test coverage
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: component-coverage
        path: coverage/
        retention-days: 7

  # Build and test Storybook
  build-storybook:
    runs-on: ubuntu-latest
    needs: validate-components
    if: always() && (github.event_name != 'workflow_dispatch' || github.event.inputs.component_action == 'build-storybook')
    
    outputs:
      storybook-url: ${{ steps.deploy.outputs.url }}
      build-status: ${{ steps.build.outputs.status }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build Storybook
      id: build
      run: |
        echo "Building Storybook for component library..."
        npm run build-storybook
        
        if [ $? -eq 0 ]; then
          echo "✅ Storybook build successful"
          echo "status=success" >> $GITHUB_OUTPUT
        else
          echo "❌ Storybook build failed"
          echo "status=failed" >> $GITHUB_OUTPUT
          exit 1
        fi
    
    - name: Test Storybook stories
      run: |
        echo "Testing Storybook stories..."
        
        # Start Storybook in background
        npm run storybook &
        STORYBOOK_PID=$!
        
        # Wait for Storybook to start
        echo "Waiting for Storybook to start..."
        for i in {1..30}; do
          if curl -f http://localhost:${{ env.STORYBOOK_PORT }} >/dev/null 2>&1; then
            echo "✅ Storybook is running"
            break
          fi
          if [ $i -eq 30 ]; then
            echo "❌ Storybook failed to start"
            kill $STORYBOOK_PID || true
            exit 1
          fi
          sleep 2
        done
        
        # Run story tests (if available)
        npm run test-storybook || echo "⚠️ No Storybook tests configured"
        
        # Stop Storybook
        kill $STORYBOOK_PID || true
    
    - name: Generate component documentation
      run: |
        echo "Generating component documentation..."
        
        # Create documentation directory
        mkdir -p docs/components
        
        # Generate component list
        echo "# AfriPay Component Library" > docs/components/README.md
        echo "" >> docs/components/README.md
        echo "## Available Components" >> docs/components/README.md
        echo "" >> docs/components/README.md
        
        # List all components
        for component_dir in client/src/components/*/; do
          if [ -d "$component_dir" ]; then
            component_name=$(basename "$component_dir")
            
            # Skip utility directories
            if [[ "$component_name" =~ ^(ui|layout|shared)$ ]]; then
              continue
            fi
            
            echo "- **$component_name**" >> docs/components/README.md
            
            # Check if component has a story
            if [ -f "${component_dir}${component_name}.stories.tsx" ]; then
              echo "  - 📖 [Storybook Story](../storybook/?path=/story/${component_name,,})" >> docs/components/README.md
            fi
            
            # Check if component has tests
            if [ -f "${component_dir}${component_name}.test.tsx" ]; then
              echo "  - 🧪 Tests available" >> docs/components/README.md
            fi
            
            echo "" >> docs/components/README.md
          fi
        done
        
        echo "✅ Component documentation generated"
    
    - name: Upload Storybook build
      uses: actions/upload-artifact@v4
      with:
        name: storybook-build
        path: storybook-static/
        retention-days: 7
    
    - name: Upload component documentation
      uses: actions/upload-artifact@v4
      with:
        name: component-docs
        path: docs/
        retention-days: 7

  # Visual regression testing
  visual-regression-test:
    runs-on: ubuntu-latest
    needs: build-storybook
    if: always() && needs.build-storybook.outputs.build-status == 'success' && (github.event_name != 'workflow_dispatch' || github.event.inputs.component_action == 'run-visual-tests')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Download Storybook build
      uses: actions/download-artifact@v4
      with:
        name: storybook-build
        path: storybook-static/
    
    - name: Install Playwright
      run: npx playwright install --with-deps chromium
    
    - name: Run visual regression tests
      run: |
        echo "Running visual regression tests..."
        
        # Start static server for Storybook
        npx http-server storybook-static -p ${{ env.STORYBOOK_PORT }} &
        SERVER_PID=$!
        
        # Wait for server to start
        for i in {1..15}; do
          if curl -f http://localhost:${{ env.STORYBOOK_PORT }} >/dev/null 2>&1; then
            echo "✅ Storybook server is running"
            break
          fi
          if [ $i -eq 15 ]; then
            echo "❌ Storybook server failed to start"
            kill $SERVER_PID || true
            exit 1
          fi
          sleep 2
        done
        
        # Run Playwright tests for visual regression
        npx playwright test || echo "⚠️ Visual regression tests completed with warnings"
        
        # Stop server
        kill $SERVER_PID || true
    
    - name: Upload visual test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: visual-test-results
        path: test-results/
        retention-days: 7

  # Component library publishing
  publish-library:
    runs-on: ubuntu-latest
    needs: [validate-components, build-storybook]
    if: github.ref == 'refs/heads/main' && (github.event_name != 'workflow_dispatch' || github.event.inputs.component_action == 'publish-library')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Download Storybook build
      uses: actions/download-artifact@v4
      with:
        name: storybook-build
        path: storybook-static/
    
    - name: Create component library package
      run: |
        echo "Creating component library package..."
        
        # Create library directory
        mkdir -p dist/library
        
        # Copy components
        cp -r client/src/components/* dist/library/
        
        # Copy types and utilities
        cp -r client/src/lib dist/library/
        cp -r client/src/hooks dist/library/
        
        # Create package.json for library
        cat > dist/library/package.json << EOF
        {
          "name": "@afripay/component-library",
          "version": "${{ env.COMPONENT_LIBRARY_VERSION }}",
          "description": "AfriPay React Component Library",
          "main": "index.js",
          "types": "index.d.ts",
          "files": [
            "**/*"
          ],
          "keywords": [
            "react",
            "components",
            "afripay",
            "fintech",
            "ui"
          ],
          "peerDependencies": {
            "react": "^19.0.0",
            "react-dom": "^19.0.0"
          },
          "repository": {
            "type": "git",
            "url": "https://github.com/afripay/afripay-app.git"
          },
          "license": "MIT"
        }
        EOF
        
        # Create barrel export
        echo "export * from './components';" > dist/library/index.ts
        
        echo "✅ Component library package created"
    
    - name: Build library types
      run: |
        echo "Building TypeScript declarations..."
        npx tsc --declaration --emitDeclarationOnly --outDir dist/library
    
    - name: Create library documentation
      run: |
        echo "Creating library documentation..."
        
        cat > dist/library/README.md << 'EOF'
        # AfriPay Component Library
        
        A comprehensive React component library for African fintech applications.
        
        ## Installation
        
        ```bash
        npm install @afripay/component-library
        ```
        
        ## Usage
        
        ```tsx
        import { Button, Card, Modal } from '@afripay/component-library';
        
        function MyApp() {
          return (
            <Card>
              <Button variant="primary">Click me</Button>
            </Card>
          );
        }
        ```
        
        ## Components
        
        - 🔘 Buttons (Primary, Secondary, Ghost, Outline)
        - 📄 Cards (Standard, Interactive, Payment)
        - 🏛️ Modals (Standard, Confirmation, Payment)
        - 📝 Forms (Input, Select, Checkbox, Radio)
        - 📊 Data Display (Tables, Charts, Metrics)
        - 🎯 Navigation (Tabs, Breadcrumbs, Pagination)
        - 💰 Financial (Wallet, Transaction, Payment)
        - 🌍 Accessibility (WCAG AAA compliant)
        - 🗣️ Multilingual (English, French, Arabic, Swahili)
        
        ## Documentation
        
        Visit our [Storybook](https://afripay-storybook.netlify.app) for interactive examples.
        
        ## License
        
        MIT License
        EOF
    
    - name: Version bump
      if: github.event.inputs.version_bump
      run: |
        VERSION_TYPE="${{ github.event.inputs.version_bump }}"
        echo "Bumping version: $VERSION_TYPE"
        
        cd dist/library
        npm version $VERSION_TYPE --no-git-tag-version
    
    - name: Publish to npm (dry run)
      run: |
        echo "Publishing component library (dry run)..."
        cd dist/library
        npm publish --dry-run
        echo "✅ Library package validation successful"
    
    - name: Create release tag
      if: github.event.inputs.version_bump
      run: |
        VERSION=$(node -p "require('./dist/library/package.json').version")
        git tag "component-library-v$VERSION"
        echo "Created tag: component-library-v$VERSION"
    
    - name: Upload library package
      uses: actions/upload-artifact@v4
      with:
        name: component-library-package
        path: dist/library/
        retention-days: 30

  # Integration testing with main app
  integration-test:
    runs-on: ubuntu-latest
    needs: [validate-components, build-storybook]
    if: always() && needs.validate-components.outputs.validation-status == 'success'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Test component integration
      run: |
        echo "Testing component integration with main application..."
        
        # Build the application to test component integration
        npm run build
        
        echo "✅ Component integration test passed"
    
    - name: Test component CLI
      run: |
        echo "Testing component management CLI..."
        
        # Test CLI help
        npx tsx codex.component.mts --help
        
        # Test component listing
        npx tsx codex.component.mts list
        
        echo "✅ Component CLI tests passed"

  # Summary and notification
  pipeline-summary:
    runs-on: ubuntu-latest
    needs: [validate-components, build-storybook, visual-regression-test, publish-library, integration-test]
    if: always()
    
    steps:
    - name: Generate pipeline summary
      run: |
        echo "# Component Library Pipeline Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## 📊 Pipeline Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Validation results
        if [ "${{ needs.validate-components.outputs.validation-status }}" = "success" ]; then
          echo "✅ **Component Validation**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "⚠️ **Component Validation**: Warning" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Storybook results
        if [ "${{ needs.build-storybook.outputs.build-status }}" = "success" ]; then
          echo "✅ **Storybook Build**: Successful" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Storybook Build**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Visual testing results
        if [ "${{ needs.visual-regression-test.result }}" = "success" ]; then
          echo "✅ **Visual Tests**: Passed" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.visual-regression-test.result }}" = "skipped" ]; then
          echo "⏭️ **Visual Tests**: Skipped" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Visual Tests**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Publishing results
        if [ "${{ needs.publish-library.result }}" = "success" ]; then
          echo "✅ **Library Publishing**: Successful" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.publish-library.result }}" = "skipped" ]; then
          echo "⏭️ **Library Publishing**: Skipped" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Library Publishing**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Integration testing results
        if [ "${{ needs.integration-test.result }}" = "success" ]; then
          echo "✅ **Integration Tests**: Passed" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Integration Tests**: Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 📈 Component Changes" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -n "${{ needs.validate-components.outputs.components-changed }}" ]; then
          echo "**Changed Components**: ${{ needs.validate-components.outputs.components-changed }}" >> $GITHUB_STEP_SUMMARY
        else
          echo "**Changed Components**: None" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "**Changed Stories**: ${{ needs.validate-components.outputs.stories-changed }}" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🔗 Artifacts" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- 📚 Storybook Build" >> $GITHUB_STEP_SUMMARY
        echo "- 📄 Component Documentation" >> $GITHUB_STEP_SUMMARY
        echo "- 🧪 Test Coverage Report" >> $GITHUB_STEP_SUMMARY
        echo "- 📦 Component Library Package" >> $GITHUB_STEP_SUMMARY
        echo "- 👀 Visual Test Results" >> $GITHUB_STEP_SUMMARY
    
    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo, number } = context.issue;
          
          let comment = `## 🧩 Component Library Pipeline Results\n\n`;
          
          // Add validation status
          const validationStatus = '${{ needs.validate-components.outputs.validation-status }}';
          if (validationStatus === 'success') {
            comment += `✅ Component validation passed\n`;
          } else {
            comment += `⚠️ Component validation has warnings\n`;
          }
          
          // Add changed components
          const changedComponents = '${{ needs.validate-components.outputs.components-changed }}';
          if (changedComponents) {
            comment += `\n**Changed Components**: ${changedComponents}\n`;
          }
          
          // Add Storybook status
          const storybookStatus = '${{ needs.build-storybook.outputs.build-status }}';
          if (storybookStatus === 'success') {
            comment += `\n✅ Storybook build successful\n`;
            comment += `📖 [View Storybook Documentation](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n`;
          }
          
          comment += `\n📦 All component library artifacts are available in the [workflow artifacts](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}).`;
          
          github.rest.issues.createComment({
            owner,
            repo,
            issue_number: number,
            body: comment
          });