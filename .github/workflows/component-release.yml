name: Component Library Release

on:
  push:
    tags:
      - 'component-v*'
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      include_storybook:
        description: 'Deploy Storybook with release'
        required: false
        default: true
        type: boolean

env:
  NODE_VERSION: '20.x'
  REGISTRY_URL: 'https://registry.npmjs.org'

jobs:
  # Pre-release validation
  pre-release-validation:
    runs-on: ubuntu-latest
    outputs:
      validation-passed: ${{ steps.validate.outputs.passed }}
      version: ${{ steps.version.outputs.version }}
      components-count: ${{ steps.count.outputs.components }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run component validation
      id: validate
      run: |
        echo "Running pre-release validation..."
        
        # Use our component pipeline script
        if ./scripts/component-library-pipeline.sh validate; then
          echo "✅ Component validation passed"
          echo "passed=true" >> $GITHUB_OUTPUT
        else
          echo "❌ Component validation failed"
          echo "passed=false" >> $GITHUB_OUTPUT
          exit 1
        fi
    
    - name: Count components
      id: count
      run: |
        COMPONENT_COUNT=$(find client/src/components -name "*.tsx" -not -path "*/ui/*" -not -path "*/layout/*" -not -path "*/shared/*" | wc -l)
        echo "components=$COMPONENT_COUNT" >> $GITHUB_OUTPUT
        echo "Found $COMPONENT_COUNT components"
    
    - name: Calculate version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          # Get current version from package.json and bump it
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          
          # Simple version bumping logic
          IFS='.' read -r major minor patch <<< "$CURRENT_VERSION"
          
          case $RELEASE_TYPE in
            major)
              NEW_VERSION="$((major + 1)).0.0"
              ;;
            minor)
              NEW_VERSION="$major.$((minor + 1)).0"
              ;;
            patch)
              NEW_VERSION="$major.$minor.$((patch + 1))"
              ;;
          esac
          
          echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"
        else
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/component-v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Tag version: $VERSION"
        fi

  # Build component library package
  build-library:
    runs-on: ubuntu-latest
    needs: pre-release-validation
    if: needs.pre-release-validation.outputs.validation-passed == 'true'
    
    outputs:
      package-size: ${{ steps.build.outputs.size }}
      artifact-name: ${{ steps.build.outputs.artifact }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        registry-url: ${{ env.REGISTRY_URL }}
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build component library
      id: build
      run: |
        echo "Building component library package..."
        
        # Use our pipeline script to build
        ./scripts/component-library-pipeline.sh publish
        
        # Calculate package size
        PACKAGE_SIZE=$(du -sh dist/library | cut -f1)
        echo "size=$PACKAGE_SIZE" >> $GITHUB_OUTPUT
        echo "Package size: $PACKAGE_SIZE"
        
        # Set artifact name
        ARTIFACT_NAME="afripay-components-${{ needs.pre-release-validation.outputs.version }}"
        echo "artifact=$ARTIFACT_NAME" >> $GITHUB_OUTPUT
        echo "Artifact name: $ARTIFACT_NAME"
    
    - name: Update package version
      run: |
        cd dist/library
        npm version ${{ needs.pre-release-validation.outputs.version }} --no-git-tag-version
        echo "Updated package.json version to ${{ needs.pre-release-validation.outputs.version }}"
    
    - name: Create library archive
      run: |
        cd dist
        tar -czf library-${{ needs.pre-release-validation.outputs.version }}.tar.gz library/
        echo "Created library archive"
    
    - name: Upload library package
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.build.outputs.artifact }}
        path: dist/library/
        retention-days: 90
    
    - name: Upload library archive
      uses: actions/upload-artifact@v4
      with:
        name: ${{ steps.build.outputs.artifact }}-archive
        path: dist/library-${{ needs.pre-release-validation.outputs.version }}.tar.gz
        retention-days: 90

  # Build and deploy Storybook
  build-storybook:
    runs-on: ubuntu-latest
    needs: [pre-release-validation, build-library]
    if: needs.pre-release-validation.outputs.validation-passed == 'true' && (github.event.inputs.include_storybook == 'true' || github.event.inputs.include_storybook == '')
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build Storybook
      run: |
        echo "Building Storybook for component library..."
        npm run build-storybook
        
        # Add version information to Storybook
        echo "${{ needs.pre-release-validation.outputs.version }}" > storybook-static/VERSION
        
        # Create component manifest
        cat > storybook-static/components.json << EOF
        {
          "version": "${{ needs.pre-release-validation.outputs.version }}",
          "components": ${{ needs.pre-release-validation.outputs.components-count }},
          "built": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
          "repository": "${{ github.repository }}",
          "commit": "${{ github.sha }}"
        }
        EOF
    
    - name: Upload Storybook
      uses: actions/upload-artifact@v4
      with:
        name: storybook-${{ needs.pre-release-validation.outputs.version }}
        path: storybook-static/
        retention-days: 90
    
    - name: Deploy to GitHub Pages (if main branch)
      if: github.ref == 'refs/heads/main'
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./storybook-static
        destination_dir: storybook
        enable_jekyll: false

  # Package testing
  test-package:
    runs-on: ubuntu-latest
    needs: [pre-release-validation, build-library]
    if: needs.pre-release-validation.outputs.validation-passed == 'true'
    
    strategy:
      matrix:
        node-version: ['18.x', '20.x', '21.x']
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Download library package
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.build-library.outputs.artifact-name }}
        path: dist/library/
    
    - name: Test package installation
      run: |
        echo "Testing package installation with Node.js ${{ matrix.node-version }}"
        
        # Create test project
        mkdir test-installation
        cd test-installation
        npm init -y
        
        # Install React and testing dependencies
        npm install react@^19.0.0 react-dom@^19.0.0
        
        # Install our library package
        npm install ../dist/library
        
        # Create simple test file
        cat > test.mjs << 'EOF'
        import React from 'react';
        // Test basic import
        console.log('✅ Package installation test passed');
        EOF
        
        node test.mjs
        echo "✅ Package works with Node.js ${{ matrix.node-version }}"

  # Create GitHub release
  create-release:
    runs-on: ubuntu-latest
    needs: [pre-release-validation, build-library, build-storybook, test-package]
    if: always() && needs.pre-release-validation.outputs.validation-passed == 'true' && needs.build-library.result == 'success'
    
    outputs:
      release-url: ${{ steps.release.outputs.url }}
      upload-url: ${{ steps.release.outputs.upload_url }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Download library archive
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.build-library.outputs.artifact-name }}-archive
        path: ./
    
    - name: Generate release notes
      id: notes
      run: |
        cat > release-notes.md << EOF
        # AfriPay Component Library v${{ needs.pre-release-validation.outputs.version }}
        
        ## 📦 Release Information
        
        - **Version**: ${{ needs.pre-release-validation.outputs.version }}
        - **Components**: ${{ needs.pre-release-validation.outputs.components-count }}
        - **Package Size**: ${{ needs.build-library.outputs.package-size }}
        - **Built**: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
        
        ## 🎯 What's Included
        
        - **Core UI Components**: Buttons, Cards, Modals, Forms
        - **Financial Components**: Wallets, Transactions, Payments, QR codes
        - **Data Components**: Charts, Tables, Metrics, Analytics
        - **Navigation**: Tabs, Breadcrumbs, Pagination, Search
        - **Layout**: Headers, Sidebars, Grids, Containers
        
        ## ✨ Features
        
        - ♿ **WCAG AAA Accessibility**: Full compliance with accessibility standards
        - 🌍 **Multilingual Support**: English, French, Arabic, Swahili
        - 📱 **Mobile-First Design**: Responsive components for all devices
        - 🎨 **Consistent Design System**: Based on African fintech best practices
        - 🔧 **TypeScript Support**: Full type safety and IntelliSense
        - 📖 **Storybook Documentation**: Interactive component examples
        
        ## 📚 Documentation
        
        - [Storybook Documentation](https://afripay.github.io/storybook/)
        - [Component API Reference](https://github.com/${{ github.repository }}/wiki)
        - [Usage Examples](https://github.com/${{ github.repository }}/tree/main/examples)
        
        ## 🚀 Installation
        
        \`\`\`bash
        npm install @afripay/component-library@${{ needs.pre-release-validation.outputs.version }}
        \`\`\`
        
        ## 🎯 Quick Start
        
        \`\`\`tsx
        import { Button, WalletCard } from '@afripay/component-library';
        
        function App() {
          return (
            <WalletCard balance="1,234.56" currency="USD">
              <Button variant="primary">Send Money</Button>
            </WalletCard>
          );
        }
        \`\`\`
        
        ## 🧪 Testing
        
        All components are tested with:
        - Unit tests with Jest
        - Accessibility tests with jest-axe
        - Visual regression tests with Playwright
        - Integration tests with React Testing Library
        
        ## 💡 Support
        
        - [GitHub Issues](https://github.com/${{ github.repository }}/issues)
        - [Discussions](https://github.com/${{ github.repository }}/discussions)
        - [Component Library Wiki](https://github.com/${{ github.repository }}/wiki)
        
        ---
        
        Built with ❤️ for African fintech innovation.
        EOF
        
        echo "Generated release notes"
    
    - name: Create Release
      id: release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: component-v${{ needs.pre-release-validation.outputs.version }}
        name: Component Library v${{ needs.pre-release-validation.outputs.version }}
        body_path: release-notes.md
        draft: false
        prerelease: false
        files: |
          ./library-${{ needs.pre-release-validation.outputs.version }}.tar.gz

  # NPM Publishing (optional - requires secrets)
  publish-npm:
    runs-on: ubuntu-latest
    needs: [pre-release-validation, build-library, test-package, create-release]
    if: always() && needs.create-release.result == 'success' && github.ref == 'refs/heads/main'
    environment: npm-publishing
    
    steps:
    - name: Download library package
      uses: actions/download-artifact@v4
      with:
        name: ${{ needs.build-library.outputs.artifact-name }}
        path: dist/library/
    
    - name: Setup Node.js for publishing
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        registry-url: ${{ env.REGISTRY_URL }}
    
    - name: Publish to NPM (dry run)
      run: |
        cd dist/library
        echo "Publishing to NPM (dry run)..."
        npm publish --dry-run
        echo "✅ NPM publish validation passed"
    
    # Uncomment to enable actual NPM publishing
    # - name: Publish to NPM
    #   run: |
    #     cd dist/library
    #     npm publish
    #   env:
    #     NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  # Deployment notification
  notify-deployment:
    runs-on: ubuntu-latest
    needs: [pre-release-validation, build-library, build-storybook, create-release, publish-npm]
    if: always()
    
    steps:
    - name: Generate deployment summary
      run: |
        echo "# 🚀 Component Library Release Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        echo "## 📊 Release Details" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: ${{ needs.pre-release-validation.outputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Components**: ${{ needs.pre-release-validation.outputs.components-count }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Package Size**: ${{ needs.build-library.outputs.package-size }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Release**: [${{ needs.create-release.outputs.release-url }}](${{ needs.create-release.outputs.release-url }})" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## ✅ Deployment Status" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.build-library.result }}" = "success" ]; then
          echo "- ✅ Library Package Built" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ Library Package Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.build-storybook.result }}" = "success" ]; then
          echo "- ✅ Storybook Deployed" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.build-storybook.result }}" = "skipped" ]; then
          echo "- ⏭️ Storybook Skipped" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ Storybook Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.create-release.result }}" = "success" ]; then
          echo "- ✅ GitHub Release Created" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ GitHub Release Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [ "${{ needs.publish-npm.result }}" = "success" ]; then
          echo "- ✅ NPM Package Published" >> $GITHUB_STEP_SUMMARY
        elif [ "${{ needs.publish-npm.result }}" = "skipped" ]; then
          echo "- ⏭️ NPM Publishing Skipped" >> $GITHUB_STEP_SUMMARY
        else
          echo "- ❌ NPM Publishing Failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## 🔗 Resources" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "- [Component Documentation](https://afripay.github.io/storybook/)" >> $GITHUB_STEP_SUMMARY
        echo "- [Package Downloads](https://github.com/${{ github.repository }}/releases)" >> $GITHUB_STEP_SUMMARY
        echo "- [Usage Examples](https://github.com/${{ github.repository }}/wiki)" >> $GITHUB_STEP_SUMMARY
        echo "- [Component Library CLI](https://github.com/${{ github.repository }}/blob/main/COMPONENT_CLI_GUIDE.md)" >> $GITHUB_STEP_SUMMARY