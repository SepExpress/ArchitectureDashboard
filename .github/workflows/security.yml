name: Security Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 1 AM UTC
    - cron: '0 1 * * *'

jobs:
  dependency-security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run npm audit
      run: npm audit --audit-level moderate
    
    - name: Build application
      run: npm run build
    
    - name: Run TypeScript checks
      run: npm run check
    
    - name: Run basic security tests
      run: npm run test || echo "⚠️ Tests completed with warnings"
    
    - name: Upload security report
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: security-report.html

  code-security-analysis:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: javascript, typescript
    
    - name: Autobuild
      uses: github/codeql-action/autobuild@v3
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
    
    - name: Run ESLint security rules
      run: npx eslint . --ext .ts,.tsx --config .eslintrc.security.js
    
    - name: Run Semgrep security scan
      uses: returntocorp/semgrep-action@v1
      with:
        config: >-
          p/security-audit
          p/secrets
          p/owasp-top-ten
        generateSarif: "1"
    
    - name: Upload Semgrep results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: semgrep.sarif

  authentication-security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Start application
      run: npm run dev &
      env:
        NODE_ENV: test
        DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
    
    - name: Wait for application to start
      run: sleep 10
    
    - name: Test authentication security
      run: npm run test:security:auth
    
    - name: Test session management
      run: npm run test:security:sessions
    
    - name: Test rate limiting
      run: npm run test:security:rate-limiting
    
    - name: Test input validation
      run: npm run test:security:input-validation
    
    - name: Test SQL injection protection
      run: npm run test:security:sql-injection
    
    - name: Test XSS protection
      run: npm run test:security:xss
    
    - name: Test CSRF protection
      run: npm run test:security:csrf
    
    - name: Upload authentication security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: auth-security-report
        path: test-results/security/auth/

  api-security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Start application
      run: npm run dev &
      env:
        NODE_ENV: test
        DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
    
    - name: Wait for application to start
      run: sleep 10
    
    - name: Test API authentication
      run: npm run test:security:api-auth
    
    - name: Test API authorization
      run: npm run test:security:api-authz
    
    - name: Test API rate limiting
      run: npm run test:security:api-rate-limit
    
    - name: Test API input sanitization
      run: npm run test:security:api-sanitization
    
    - name: Test API response headers
      run: npm run test:security:api-headers
    
    - name: Run OWASP ZAP API scan
      uses: zaproxy/action-api-scan@v0.7.0
      with:
        target: 'http://localhost:5000/api'
        format: openapi
        cmd_options: '-a'
    
    - name: Upload API security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: api-security-report
        path: |
          test-results/security/api/
          report_html.html

  blockchain-security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Start application
      run: npm run dev &
      env:
        NODE_ENV: test
        DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
    
    - name: Wait for application to start
      run: sleep 10
    
    - name: Test wallet security
      run: npm run test:security:wallet
    
    - name: Test cryptocurrency transaction security
      run: npm run test:security:crypto-transactions
    
    - name: Test smart contract integration security
      run: npm run test:security:smart-contracts
    
    - name: Test private key handling
      run: npm run test:security:private-keys
    
    - name: Test multi-signature security
      run: npm run test:security:multisig
    
    - name: Upload blockchain security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: blockchain-security-report
        path: test-results/security/blockchain/

  penetration-testing:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: npm run build
    
    - name: Start application
      run: npm run dev &
      env:
        NODE_ENV: test
        DATABASE_URL: ${{ secrets.TEST_DATABASE_URL }}
    
    - name: Wait for application to start
      run: sleep 10
    
    - name: Run OWASP ZAP full scan
      uses: zaproxy/action-full-scan@v0.10.0
      with:
        target: 'http://localhost:5000'
        rules_file_name: '.zap/rules.tsv'
        cmd_options: '-a'
    
    - name: Run custom penetration tests
      run: npm run test:security:penetration
    
    - name: Test business logic vulnerabilities
      run: npm run test:security:business-logic
    
    - name: Test privilege escalation
      run: npm run test:security:privilege-escalation
    
    - name: Upload penetration test report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: penetration-test-report
        path: |
          test-results/security/penetration/
          report_html.html

  compliance-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Use Node.js 20.x
      uses: actions/setup-node@v4
      with:
        node-version: 20.x
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Check PCI DSS compliance
      run: npm run test:compliance:pci-dss
    
    - name: Check GDPR compliance
      run: npm run test:compliance:gdpr
    
    - name: Check CCPA compliance
      run: npm run test:compliance:ccpa
    
    - name: Check financial regulations compliance
      run: npm run test:compliance:financial
    
    - name: Check data encryption compliance
      run: npm run test:compliance:encryption
    
    - name: Generate compliance report
      run: npm run compliance:report
    
    - name: Upload compliance report
      uses: actions/upload-artifact@v3
      with:
        name: compliance-report
        path: compliance-report.html

  security-monitoring:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Send security status to monitoring
      run: |
        curl -X POST "${{ secrets.SECURITY_WEBHOOK_URL }}" \
          -H "Content-Type: application/json" \
          -d '{
            "repository": "${{ github.repository }}",
            "commit": "${{ github.sha }}",
            "status": "security-scan-completed",
            "timestamp": "'$(date -Iseconds)'"
          }'
    
    - name: Post security status to Slack
      if: failure()
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: 'Security tests failed! Immediate attention required.'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}